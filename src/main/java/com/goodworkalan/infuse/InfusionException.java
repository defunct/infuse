package com.goodworkalan.infuse;

import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import com.goodworkalan.danger.ContextualDanger;

/**
 * An exception for errors generated by the infusion package.
 *
 * @author Alan Gutierrez
 */
public class InfusionException extends ContextualDanger {
    /** Serial version id. */
    private static final long serialVersionUID = -1L;

    /** The cache of message exception resource bundles. */
    private final static ConcurrentMap<String, ResourceBundle> BUNDLES = new ConcurrentHashMap<String, ResourceBundle>();

    /**
     * Create an infusion exception with the given context, the given message
     * key, the given cause and the given positioned format arguments.
     * 
     * @param contextClass
     *            The error context.
     * @param messageKey
     *            The error message key.
     * @param arguments
     *            The positioned format arguments.
     */
    public InfusionException(Class<?> contextClass, String messageKey, Object... arguments) {
        super(BUNDLES, contextClass, messageKey, null, arguments);
    }

    /**
     * Create an infusion exception with the given code and the given positioned
     * format arguments.
     * 
     * @param contextClass
     *            The error context.
     * @param messageKey
     *            The error message key.
     * @param cause
     *            The cause.
     * @param arguments
     *            The positioned format arguments.
     */
    public InfusionException(Class<?> contextClass, String messageKey, Throwable cause, Object...arguments) {
        super(BUNDLES, contextClass, messageKey, cause, arguments);
    }
}
